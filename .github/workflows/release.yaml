# "Inspired" by RipGrep
# https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml
name: Release
on:
  push:
    branches:
    - workflow_release
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Get the branch and tag
        id: info
        shell: bash
        run: |
          branch="${GITHUB_REF#refs/heads/}"
          echo "branch: $branch"
          if [[ "$branch" == "workflow_release" ]]; then
            version="TEST-0.0.0"
            draft="true"
          else
            version="${GITHUB_REF#refs/tags/}"
            draft="false"
          fi
          date=$(env TZ=':America/Los_Angeles' date +'%Y-%m-%d')
          echo "version: $version, draft: $draft, date: $date"
          echo "::set-output name=version::$version"
          echo "::set-output name=draft::$draft"
          echo "::set-output name=date::$date"

      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.info.outputs.version }}
          release_name: ${{ steps.info.outputs.version }} (${{ steps.info.outputs.date }})
          draft: ${{ steps.info.outputs.draft }}

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Save version number to artifact
        run: echo "${{ steps.info.outputs.version }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux-gnu, macos, win-msvc]
        include:
        - build: linux-gnu
          os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
        - build: macos
          os: macos-latest
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-2019
          target: x86_64-pc-windows-msvc
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        target: ${{ matrix.target }}
    - name: Get release download URL
      uses: actions/download-artifact@v1
      with:
        name: artifacts
        path: artifacts
    - name: Set release upload URL and release version
      id: release
      shell: bash
      run: |
        release_upload_url="$(cat artifacts/release-upload-url)"
        echo "::set-output name=upload_url::$release_upload_url"
        echo "release upload url: $release_upload_url"
        release_version="$(cat artifacts/release-version)"
        echo "::set-output name=version::$release_version"
        echo "release version: $release_version"
    - name: Build release binary
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose --release --target "${{ matrix.target }}"
    - name: Build archive
      id: build
      shell: bash
      run: |
        staging="mech3ax-${{ steps.release.outputs.version }}"
        mkdir "$staging"
        archive="$staging-${{ matrix.target }}"
        cp {README.md,LICENSE,mechlib2blend.py,gamez2blend.py} "$staging/"
        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          cp target/${{ matrix.target }}/release/{unzbd,rezbd}.exe "$staging/"
          cp target/${{ matrix.target }}/release/mech3ax.dll "$staging/"
          7z a "$archive.zip" "$staging"
          echo "::set-output name=asset::$archive.zip"
        else
          cp target/${{ matrix.target }}/release/{unzbd,rezbd} "$staging/"
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            cp target/${{ matrix.target }}/release/libmech3ax.dylib "$staging/"
          else
            cp target/${{ matrix.target }}/release/libmech3ax.so "$staging/"
          fi
          tar czvf "$archive.tar.gz" "$staging"
          echo "::set-output name=asset::$archive.tar.gz"
        fi
    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ${{ steps.build.outputs.asset }}
        asset_name: ${{ steps.build.outputs.asset }}
        asset_content_type: application/octet-stream
