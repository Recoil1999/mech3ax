name: Release

on:
  push:
    branches:
    - workflow_release
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
    - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'
    - 'v[0-9]+.[0-9]+.[0-9]+-alpha'
    - 'v[0-9]+.[0-9]+.[0-9]+-beta'

jobs:
  create_release:
    name: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Get release information
        id: info
        run: |
          ref_name='${{ github.ref_name }}'
          echo "ref_name: $ref_name"

          # is this a test release, or a real release?
          if [[ "$ref_name" == "workflow_release" ]]; then
            version="v0.0.0-test"
            target_commitish='${{ github.sha }}'
          else
            version="$ref_name"
            target_commitish="$ref_name"
          fi
          echo "version: $version"
          echo "target_commitish: $target_commitish"

          # is this a pre-release (-rc*, -alpha, -beta, -test)?
          if [[ "$version" == *"-"* ]]; then
            prerelease="true"
          else
            prerelease="false"
          fi
          echo "prerelease: $prerelease"

          date=$(env TZ=':America/Los_Angeles' date +'%Y-%m-%d')
          echo "date: $date"

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "target_commitish=$target_commitish" >> $GITHUB_OUTPUT
          echo "date=$date" >> $GITHUB_OUTPUT
          echo "prerelease=$prerelease" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create GitHub release
        id: release
        run: |
          curl \
            --fail \
            --request "POST" \
            --url '${{ github.api_url }}/repos/${{ github.repository }}/releases' \
            --header 'Accept: application/vnd.github+json' \
            --header 'Authorization: Bearer ${{ github.token }}' \
            --header 'Content-type: application/json' \
            --data '{
              "tag_name": "${{ steps.info.outputs.version }}",
              "target_commitish": "${{ steps.info.outputs.target_commitish }}",
              "name": "${{ steps.info.outputs.version }} (${{ steps.info.outputs.date }})",
              "prerelease": ${{ steps.info.outputs.prerelease }},
              "draft": true
              }' \
            --output 'release.json'
          cat release.json

          upload_url=$(jq -r '.upload_url' release.json)
          upload_url="${upload_url%%'{?name,label}'}"
          echo "upload_url: $upload_url"
          echo "upload_url=$upload_url" >> $GITHUB_OUTPUT
        shell: bash

    outputs:
      version: ${{ steps.info.outputs.version }}
      upload_url: ${{ steps.release.outputs.upload_url }}

  build_release:
    name: build_release
    needs: ['create_release']
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
      # Disable incremental compilation.
      CARGO_INCREMENTAL: 0
      # Enable colors in cargo output.
      CARGO_TERM_COLOR: always

    strategy:
      matrix:
        build: [linux-gnu, macos, win-msvc]
        include:
          - build: linux-gnu
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

          - build: win-msvc
            os: windows-2019
            target: x86_64-pc-windows-msvc

    steps:
      - name: Dump release info
        run: |
          echo 'version: ${{ needs.create_release.outputs.version }}'
          echo 'upload_url: ${{ needs.create_release.outputs.upload_url }}'
        shell: bash

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install toolchain
        run: rustup show
        shell: bash

      - name: Build release binary
        run: cargo build --verbose --release --target "${{ matrix.target }}"
        shell: bash

      - name: Build archive
        id: build
        run: |
          staging='mech3ax-${{ needs.create_release.outputs.version }}'
          mkdir "$staging"
          # copy supporting files
          cp {README.md,LICENSE,mechlib2blend.py,gamez2blend.py} "$staging/"
          # copy build artifacts and compress
          target_dir='target/${{ matrix.target }}/release'
          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "$target_dir/unzbd.exe" "$target_dir/rezbd.exe" "$staging/"
            cp "$target_dir/mech3ax.dll" "$staging/$staging.dll"
            ls -1 "$staging"
            archive="$staging-${{ matrix.target }}.zip"
            7z a "$archive" "$staging"
          else
            if [ "${{ matrix.os }}" = "macos-latest" ]; then
              ext="dylib"
            else
              ext="so"
            fi
            cp "$target_dir/unzbd" "$target_dir/rezbd" "$staging/"
            cp "$target_dir/libmech3ax.$ext" "$staging/lib$staging.$ext"
            ls -1 "$staging"
            archive="$staging-${{ matrix.target }}.tar.gz"
            tar czvf "$archive" "$staging"
          fi
          echo "asset=$archive" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload release archive
        run: |
          curl \
            --fail \
            --request "POST" \
            --url '${{ needs.create_release.outputs.upload_url }}?name=${{ steps.build.outputs.asset }}' \
            --header 'Accept: application/vnd.github+json' \
            --header 'Authorization: Bearer ${{ github.token }}' \
            --header 'Content-type: application/octet-stream' \
            --data-binary '@${{ steps.build.outputs.asset }}'
        shell: bash
